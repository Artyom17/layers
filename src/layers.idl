// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

typedef (WebGLRenderingContext or WebGL2RenderingContext) XRWebGLRenderingContext;

// https://immersive-web.github.io/webxr/#xrwebgllayer-interface
[
    SecureContext,
    Exposed=Window,
    RuntimeEnabled=WebXR
] interface XRLayerDataSource {
};

[
    SecureContext,
    Exposed=Window,
    RuntimeEnabled=WebXR
] interface XRLayerTextureDataSource {
  readonly attribute XRWebGLRenderingContext context;
  readonly attribute unsigned long textureWidth;
  readonly attribute unsigned long textureHeight;
  readonly attribute unsigned long textureDepth;
  readonly attribute WebGLTexture texture;
};

[
    SecureContext,
    Exposed=Window,
    RuntimeEnabled=WebXR
] interface XRLayerTextureArrayDataSource {
  readonly attribute XRWebGLRenderingContext context;
  readonly attribute unsigned long arrayTextureWidth;
  readonly attribute unsigned long arrayTextureHeight;
  readonly attribute unsigned long arrayTextureDepth;
  readonly attribute WebGLTexture arrayTexture;
};

[
    SecureContext,
    Exposed=Window,
    RuntimeEnabled=WebXR
] interface XRLayerFramebufferDataSource {
  readonly attribute XRWebGLRenderingContext context;
  readonly attribute boolean antialias;
  readonly attribute boolean depth;
  readonly attribute boolean stencil;
  readonly attribute boolean alpha;

  readonly attribute unsigned long framebufferWidth;
  readonly attribute unsigned long framebufferHeight;
  readonly attribute WebGLFramebuffer framebuffer;
};

[
    SecureContext,
    Exposed=Window,
    RuntimeEnabled=WebXR
] interface XRLayerDOMDataSource {
  readonly attribute string url;
};

[
    SecureContext,
    Exposed=Window,
    RuntimeEnabled=WebXR,
    Constructor(XRSession session, XRWebGLRenderingContext context, optional XRWebGLLayerInit layerInit),
    RaisesException=Constructor
] interface XRWebGLLayer : XRLayer {
  [ImplementedAs=getXRWebGLRenderingContext] readonly attribute XRWebGLRenderingContext context;
  readonly attribute XRLayerDataSource source;

  XRViewport? getViewport(XRView view);
  void requestViewportScaling(double viewportScaleFactor);

  static double getNativeFramebufferScaleFactor(XRSession session);
};

[
    SecureContext,
    Exposed=Window,
    RuntimeEnabled=WebXR,
    Constructor(XRSession session, XRWebGLRenderingContext context, optional XRWebGLLayerInit layerInit),
    RaisesException=Constructor
] interface XRQuadLayer : XRLayer {
  readonly attribute XRLayerDataSource source;

  XRViewport? getViewport(XRView view);
  void requestViewportScaling(double viewportScaleFactor);

  static double getNativeFramebufferScaleFactor(XRSession session);
};
